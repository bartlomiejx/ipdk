#!/usr/bin/env bash
#
# Copyright (C) 2022 Intel Corporation
# SPDX-License-Identifier: Apache-2.0
#

set -e
[ "$DEBUG" == 'true' ] && set -x

current_script_dir=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &> /dev/null && pwd)
declare vm_serial
declare nqn
declare storage_target_ip
declare ipu_storage_container_ip
declare virtio_blk_virtual_id
declare port_to_expose
# shellcheck disable=SC1091,SC1090
source "${current_script_dir}"/test-helpers

wait_until_port_on_ip_addr_open "${storage_target_ip}" "${DEFAULT_SPDK_PORT}"
create_and_expose_sybsystem_over_tcp \
	"${storage_target_ip}" "${nqn}" "${port_to_expose}"

ramdrive_size_in_mb=16
ramdrives=()
for ((i=0; i < 6; i++))
do
    ramdrives+=("$(create_ramdrive_and_attach_as_ns_to_subsystem \
        "${storage_target_ip}" "Malloc${i}" "${ramdrive_size_in_mb}" \
        "${nqn}")")
done

wait_until_vm_is_up "${vm_serial}"
log_in_with_default_credentials "${vm_serial}"

is_virtio_blk_not_attached "${vm_serial}"

echo ""
echo "### Attach 3 virtio-blk devices ###"


virtio_blk0_physical_id=0
virtio_blk0=$(create_virtio_blk "${ipu_storage_container_ip}" "${ramdrives[0]}" \
	"${virtio_blk0_physical_id}" "${virtio_blk_virtual_id}" \
	"${nqn}" "${storage_target_ip}" "${port_to_expose}")
check_number_of_virtio_blk_devices "${vm_serial}" 1

virtio_blk1_physical_id=1
create_virtio_blk "${ipu_storage_container_ip}" "${ramdrives[1]}" \
	"${virtio_blk1_physical_id}" "${virtio_blk_virtual_id}" \
	"${nqn}" "${storage_target_ip}" "${port_to_expose}"
check_number_of_virtio_blk_devices "${vm_serial}" 2

virtio_blk2_physical_id=2
create_virtio_blk "${ipu_storage_container_ip}" "${ramdrives[2]}" \
	"${virtio_blk2_physical_id}" "${virtio_blk_virtual_id}" \
	"${nqn}" "${storage_target_ip}" "${port_to_expose}"
check_number_of_virtio_blk_devices "${vm_serial}" 3

echo ""
echo "### Dettach 1st virtio-blk ###"
delete_virtio_blk "${ipu_storage_container_ip}" "${virtio_blk0}"
check_number_of_virtio_blk_devices "${vm_serial}" 2

echo ""
echo "### Attach 1st virtio-blk back ###"
create_virtio_blk "${ipu_storage_container_ip}" "${ramdrives[0]}" \
	"${virtio_blk0_physical_id}" "${virtio_blk_virtual_id}" \
	"${nqn}" "${storage_target_ip}" "${port_to_expose}"
check_number_of_virtio_blk_devices "${vm_serial}" 3


echo ""
echo "### Create 2 nvme devices ###"
nvme_physical_id=4
nvme0=$(create_nvme_device "$ipu_storage_container_ip" "$nvme_physical_id" 0 | jq -r '.handle')
nvme_physical_id=5
nvme1=$(create_nvme_device "$ipu_storage_container_ip" "$nvme_physical_id" 0 | jq -r '.handle')
get_output_from_unix_socket "${vm_serial}" 3

echo ""
echo "### Attach 3 namespaces to nvme devices ###"
check_number_of_nvme_devices "${vm_serial}" 0
attach_volume "$ipu_storage_container_ip" "$nvme0" "${ramdrives[3]}" "$nqn" \
	"$storage_target_ip"
attach_volume "$ipu_storage_container_ip" "$nvme0" "${ramdrives[4]}" "$nqn" \
	"$storage_target_ip"
attach_volume "$ipu_storage_container_ip" "$nvme1" "${ramdrives[5]}" "$nqn" \
	"$storage_target_ip"
check_number_of_nvme_devices "${vm_serial}" 3

echo ""
echo "### Dettach namespace from nvme device ###"
detach_volume "$ipu_storage_container_ip" "$nvme1" "${ramdrives[5]}"
check_number_of_nvme_devices "${vm_serial}" 2

echo ""
echo "### Delete nvme device ###"
delete_nvme_device "$ipu_storage_container_ip" "$nvme1"
check_number_of_nvme_devices "${vm_serial}" 2

echo ""
echo "### Re-attach ramdrive as namespace to another nvme device ###"
attach_volume "$ipu_storage_container_ip" "$nvme0" "${ramdrives[5]}" "$nqn" \
	"$storage_target_ip"
check_number_of_nvme_devices "${vm_serial}" 3

exit 0
