#!/usr/bin/env bash
#
# Copyright (C) 2022 Intel Corporation
# SPDX-License-Identifier: Apache-2.0
#

set -e
[ "$DEBUG" == 'true' ] && set -x

current_script_dir=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &> /dev/null && pwd)
declare vm_serial
declare nqn
declare storage_target_ip
declare ipu_storage_container_ip
declare virtio_blk_virtual_id
declare port_to_expose
# shellcheck disable=SC1091,SC1090
source "${current_script_dir}"/test-helpers

function create_ramdrives() {
    local storage_target_ip="$1"
    local -n ramdrives=$2
    local number_of_devices="$3"
    local nqn="$4"
    local ramdrive_size_in_mb=4
    for ((i=0; i < "$number_of_devices"; i++))
    do
        ramdrives+=("$(create_ramdrive_and_attach_as_ns_to_subsystem \
            "${storage_target_ip}" "Malloc${i}" "${ramdrive_size_in_mb}" \
            "${nqn}")")
    done
}

function create_virtio_blk_devices() {
    local ipu_storage_container_ip="$1"
    local ramdrives=("${!2}")
    local -n virtio_blk_devices=$3
    local number_of_devices="$4"
    local nqn="$5"
    local storage_target_ip="$6"
    local port_to_expose="$7"
    local virtio_blk_virtual_id=0

    for ((i=0; i < "$number_of_devices"; i++))
    do
        virtio_blk_devices+=("$(create_virtio_blk_without_disk_check \
            "${ipu_storage_container_ip}" \
            "${ramdrives[$i]}" "${i}" "${virtio_blk_virtual_id}" \
            "${nqn}" "${storage_target_ip}" "${port_to_expose}")")
    done

    local wait_for_volume=5
    wait_for_volume_in_os "${virtio_blk_devices[-1]}" "${ramdrives[-1]}" \
        "$wait_for_volume"
}

function delete_virtio_blk_devices() {
    local ipu_storage_container_ip="$1"
    local devices=("${!2}")
    local number_of_devices="$3"
    for ((i=0; i < "$number_of_devices"; i++))
    do
        delete_virtio_blk "$ipu_storage_container_ip" "${devices[$i]}"
    done
}

wait_until_port_on_ip_addr_open "${storage_target_ip}" "${DEFAULT_SPDK_PORT}"
create_and_expose_sybsystem_over_tcp \
	"${storage_target_ip}" "${nqn}" "${port_to_expose}"

echo "Create $NUMBER_OF_DEVICES_TO_ATTACH_IN_SCALE_OUT disks on storage-target"
ramdrives=()
create_ramdrives "$storage_target_ip" ramdrives \
    "$NUMBER_OF_DEVICES_TO_ATTACH_IN_SCALE_OUT" "$nqn"

wait_until_vm_is_up "${vm_serial}"
log_in_with_default_credentials "${vm_serial}"
is_virtio_blk_not_attached "${vm_serial}"

echo "Create $NUMBER_OF_DEVICES_TO_ATTACH_IN_SCALE_OUT virtio-blk disks backed by ramdrives"
virtio_blk_devices=()
create_virtio_blk_devices "${ipu_storage_container_ip}" ramdrives[@] \
        virtio_blk_devices "$NUMBER_OF_DEVICES_TO_ATTACH_IN_SCALE_OUT" \
        "${nqn}" "${storage_target_ip}" "${port_to_expose}"
check_number_of_virtio_blk_devices "${vm_serial}" \
    "$NUMBER_OF_DEVICES_TO_ATTACH_IN_SCALE_OUT"

echo "Delete all created virtio-blk disks"
delete_virtio_blk_devices "$ipu_storage_container_ip" virtio_blk_devices[@] \
    "$NUMBER_OF_DEVICES_TO_ATTACH_IN_SCALE_OUT"
check_number_of_virtio_blk_devices "${vm_serial}" 0


function create_nvme_devices() {
    local ipu_storage_container_ip="$1"
    local -n nvme_devices=$2
    local number_of_devices="$3"
    local nvme_virtual_id=0

    for ((i=0; i < "$number_of_devices"; i++))
    do
        nvme_devices+=("$(create_nvme_device "${ipu_storage_container_ip}" \
            "${i}" "$nvme_virtual_id")")
    done
}

function attach_each_ramdrive_to_each_device() {
    local ipu_storage_container_ip="$1"
    local nvme_devices=("${!2}")
    local ramdrives=("${!3}")
    local nqn="$4"
    local storage_target_ip="$5"
    local number_of_devices="$6"

    for ((i=0; i < "$number_of_devices"; i++))
    do
        attach_volume "$ipu_storage_container_ip" "${nvme_devices[$i]}" \
            "${ramdrives[$i]}" "$nqn" "$storage_target_ip"
    done
}

function dettach_each_ramdrive_from_each_device() {
    local ipu_storage_container_ip="$1"
    local nvme_devices=("${!2}")
    local ramdrives=("${!3}")
    local number_of_devices="$4"

    for ((i=0; i < "$number_of_devices"; i++))
    do
        detach_volume "$ipu_storage_container_ip" "${nvme_devices[$i]}" "${ramdrives[$i]}"
    done
}

function attach_each_ramdrive_to_single_device() {
    local ipu_storage_container_ip="$1"
    local nvme_device="$2"
    local ramdrives=("${!3}")
    local nqn="$4"
    local storage_target_ip="$5"
    local number_of_devices="$6"

    for ((i=0; i < "$number_of_devices"; i++))
    do
        attach_volume "$ipu_storage_container_ip" "$nvme_device" \
            "${ramdrives[$i]}" "$nqn" "$storage_target_ip"
    done
}

function dettach_each_ramdrive_from_single_device() {
    local ipu_storage_container_ip="$1"
    local nvme_device="$2"
    local ramdrives=("${!3}")
    local number_of_devices="$4"

    for ((i=0; i < "$number_of_devices"; i++))
    do
        detach_volume "$ipu_storage_container_ip" "$nvme_device" "${ramdrives[$i]}"
    done
}

function delete_nvme_devices() {
    local ipu_storage_container_ip="$1"
    local devices=("${!2}")
    local number_of_devices="$3"
    for ((i=0; i < "$number_of_devices"; i++))
    do
        delete_nvme_device "$ipu_storage_container_ip" "${devices[$i]}"
    done
}

MAX_NUMBER_OF_NAMESPACES=32
echo "Create $NUMBER_OF_DEVICES_TO_ATTACH_IN_SCALE_OUT NVMe disks backed by ramdrives"
nvme_devices=()
create_nvme_devices "$ipu_storage_container_ip" nvme_devices \
    "$NUMBER_OF_DEVICES_TO_ATTACH_IN_SCALE_OUT"

echo "Attach $NUMBER_OF_DEVICES_TO_ATTACH_IN_SCALE_OUT volumes to"
echo "$NUMBER_OF_DEVICES_TO_ATTACH_IN_SCALE_OUT nvme devices"
attach_each_ramdrive_to_each_device "$ipu_storage_container_ip" \
    nvme_devices[@] ramdrives[@] "$nqn" "$storage_target_ip" \
    "$NUMBER_OF_DEVICES_TO_ATTACH_IN_SCALE_OUT"

check_number_of_nvme_devices "${vm_serial}" \
    "$NUMBER_OF_DEVICES_TO_ATTACH_IN_SCALE_OUT"

echo "Delete all created nvme volumes"
dettach_each_ramdrive_from_each_device "$ipu_storage_container_ip" \
    nvme_devices[@] ramdrives[@] "$NUMBER_OF_DEVICES_TO_ATTACH_IN_SCALE_OUT"
check_number_of_nvme_devices "${vm_serial}" 0


echo "Attach $MAX_NUMBER_OF_NAMESPACES volumes to single device"
attach_each_ramdrive_to_single_device "$ipu_storage_container_ip" \
    ${nvme_devices[0]} ramdrives[@] "$nqn" "$storage_target_ip" \
    "$MAX_NUMBER_OF_NAMESPACES"
check_number_of_nvme_devices "${vm_serial}" "$MAX_NUMBER_OF_NAMESPACES"

echo "Delete all created nvme volumes attached to single device"
dettach_each_ramdrive_from_single_device "$ipu_storage_container_ip" \
    ${nvme_devices[0]} ramdrives[@] "$MAX_NUMBER_OF_NAMESPACES"
check_number_of_nvme_devices "${vm_serial}" 0

echo "Delete all created nvme disks"
delete_nvme_devices "$ipu_storage_container_ip" nvme_devices[@] \
    "$NUMBER_OF_DEVICES_TO_ATTACH_IN_SCALE_OUT"
