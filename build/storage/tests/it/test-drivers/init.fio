#!/usr/bin/env bash
#
# Copyright (C) 2022 Intel Corporation
# SPDX-License-Identifier: Apache-2.0
#

set -e
[ "$DEBUG" == 'true' ] && set -x

current_script_dir=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &> /dev/null && pwd)
declare vm_serial
declare nqn
declare storage_target_ip
declare ipu_storage_container_ip
declare virtio_blk_virtual_id
declare port_to_expose
declare traffic_generator_ip
# shellcheck disable=SC1091,SC1090
source "${current_script_dir}"/test-helpers

wait_until_port_on_ip_addr_open "${storage_target_ip}" "${DEFAULT_SPDK_PORT}"
create_and_expose_sybsystem_over_tcp \
	"${storage_target_ip}" "${nqn}" "${port_to_expose}"

wait_until_vm_is_up "${vm_serial}"

log_in_with_default_credentials "${vm_serial}"

wait_until_host_target_is_up "${vm_serial}"

function create_virtio_blk_and_test_run_fio() {
	local physical_id="${1}"
	local ramdrive_size_in_mb=16
	local malloc=""
	local virtio_blk=""
	local fio_args="{\"rw\":\"randrw\", \"direct\":1, \"bs\":\"4k\", \
		\"iodepth\":256, \"ioengine\":\"libaio\", \"runtime\":2, \
		\"name\":\"iops_test-job\", \"time_based\": 1, \"numjobs\": 4}"
	malloc=$(create_ramdrive_and_attach_as_ns_to_subsystem \
		"${storage_target_ip}" "Malloc${physical_id}" \
		"${ramdrive_size_in_mb}" "${nqn}")

	virtio_blk=$(create_virtio_blk "${ipu_storage_container_ip}" "${malloc}" \
		"${physical_id}" "${virtio_blk_virtual_id}" \
		"${nqn}" "${storage_target_ip}" "${port_to_expose}")

	echo "Run fio over ${virtio_blk}"

	out=$(send_fio_cmd "$traffic_generator_ip" "$HOST_TARGET_SERVICE_PORT" \
					"$virtio_blk" "$fio_args")
	echo -e "${out}"
	echo "${out}" | grep "Disk stats (read/write)"
	return "$?"
}

physical_id=0
create_virtio_blk_and_test_run_fio "${physical_id}"
physical_id=10
create_virtio_blk_and_test_run_fio "${physical_id}"

function create_nvme_and_test_run_fio() {
	local physical_id="${1}"
	local ramdrive_size_in_mb=16
    local malloc0=""
	local malloc1=""
	local nvme=""
	local fio_args="{\"rw\":\"randrw\", \"direct\":1, \"bs\":\"4k\", \
		\"iodepth\":256, \"ioengine\":\"libaio\", \"runtime\":2, \
		\"name\":\"iops_test-job\", \"time_based\": 1, \"numjobs\": 4}"
	local result=0
	malloc0=$(create_ramdrive_and_attach_as_ns_to_subsystem \
		"${storage_target_ip}" "Malloc${physical_id}-0" \
		"${ramdrive_size_in_mb}" "${nqn}")

	malloc1=$(create_ramdrive_and_attach_as_ns_to_subsystem \
		"${storage_target_ip}" "Malloc${physical_id}-1" \
		"${ramdrive_size_in_mb}" "${nqn}")

	echo "# Cretae NVME"
	nvme=$(create_nvme_device "$ipu_storage_container_ip" \
			"$physical_id" "0")
	attach_volume "$ipu_storage_container_ip" "$nvme" "$malloc0" "$nqn" \
		"$storage_target_ip"

	attach_volume "$ipu_storage_container_ip" "$nvme" "$malloc1" "$nqn" \
		"$storage_target_ip"

	echo "Run fio over all namespaced of ${nvme}"
	out=$(send_fio_cmd "$traffic_generator_ip" "$HOST_TARGET_SERVICE_PORT" \
					"$nvme" "$fio_args")
	echo -e "${out}"
	echo "${out}" | grep "Disk stats (read/write)"
	result=$(("$?" | "$result"))
	echo "$out" | grep "nvme0n1"
	result=$(("$?" | "$result"))
	echo "$out" | grep "nvme0n2"
	result=$(("$?" | "$result"))

	echo "Run fio only over $malloc0 of $nvme"
	out=$(send_fio_cmd "$traffic_generator_ip" "$HOST_TARGET_SERVICE_PORT" \
					"$nvme" "$fio_args" "$malloc0")
	echo "${out}" | grep "Disk stats (read/write)"
	result=$(("$?" | "$result"))
	echo "$out" | grep "nvme0n1"
	result=$(("$?" | "$result"))
	echo "$out" | grep -v "nvme0n2"
	result=$(("$?" | "$result"))

	echo "Run fio only over $malloc1 of $nvme"
	out=$(send_fio_cmd "$traffic_generator_ip" "$HOST_TARGET_SERVICE_PORT" \
					"$nvme" "$fio_args" "$malloc1")
	echo "${out}" | grep "Disk stats (read/write)"
	result=$(("$?" | "$result"))
	echo "$out" | grep -v "nvme0n1"
	result=$(("$?" | "$result"))
	echo "$out" | grep "nvme0n2"
	result=$(("$?" | "$result"))

	return "$result"
}
physical_id=5
create_nvme_and_test_run_fio "$physical_id"

echo "fio has been executed successfully!"
exit 0
